AWSTemplateFormatVersion: "2010-09-09"
Description: "ES cluster that hosts the movie's info. With public access and test mode"

Parameters:
    SSMRole:
        Description: EC2 Role
        Type: String
    SSMRoleARN:
        Description: EC2 Role ARN
        Type: String
    SecurityGroupId:
        Description: Bastion SG ID
        Type: String
    VPCID:
        Description: ID of the vpc
        Type: String
    SubnetId:
        Description: Id of the subnet in which this instance will be deployed
        Type: String
    MasterUser:
        Description: OpenSearch Master User Name
        Type: String
    MasterPW:
        Description: OpenSearch Master Password
        Type: String
    EnvironmentName:
        Description: An environment name that is prefixed to resource names
        Type: String
    PublicIP:
        Description: Public IP of the EC2 instance that is going to interact with ES
        Type: String
        AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
        ConstraintDescription: must be a valid IP of the form x.x.x.x 
    MyIp:
        Description: Current My Ip
        Type: String
    OpenSearchDN:
        Description: OpenSearch Master Password
        Type: String


Resources:
    lambdaSearchAppRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -  Effect: Allow
                       Principal:
                         Service:
                            - lambda.amazonaws.com
                       Action:
                          - 'sts:AssumeRole'
            Path: /
            ManagedPolicyArns: 
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/AmazonVPCFullAccess
                - arn:aws:iam::aws:policy/AmazonSSMFullAccess

    LambdaRolePolicies:
        Type: "AWS::IAM::Policy"
        DependsOn:
            - lambdaSearchAppRole
        Properties:
            PolicyName: "lambda-to-ES-cf"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Action: 'es:*'
                      Resource: '*'
            Roles: 
                - !Ref lambdaSearchAppRole             

    OpenSearchSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable all traffic from Bastion
            VpcId: !Ref 'VPCID'
            SecurityGroupIngress:
            - IpProtocol: -1
              SourceSecurityGroupId: !Ref 'SecurityGroupId' 
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-opnesearch-sg

    OpenSearchDomain:
        Type: "AWS::OpenSearchService::Domain"
        Properties:
            DomainName: !Ref 'OpenSearchDN'
            EngineVersion: "OpenSearch_1.2"
            ClusterConfig: 
                DedicatedMasterEnabled: false
                InstanceCount: 1
                InstanceType: "r5.large.search"
                ZoneAwarenessEnabled: false
                WarmEnabled: false 
            AccessPolicies: 
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                        AWS: '*'
                      Action:
                        'es:*'
                      Resource: !Join ['', [ 'arn:aws:es:',  !Ref AWS::Region, ':',  !Ref AWS::AccountId, ':domain/', !Ref 'OpenSearchDN', '/*']] 
            VPCOptions: 
                SecurityGroupIds: 
                    - !GetAtt OpenSearchSecurityGroup.GroupId
                SubnetIds: 
                    - !Ref 'SubnetId'
            NodeToNodeEncryptionOptions: 
                Enabled: true
            AdvancedOptions: 
                "rest.action.multi.allow_explicit_index": "true"
            EBSOptions: 
                EBSEnabled: true
                VolumeType: "gp2"
                VolumeSize: 50
            EncryptionAtRestOptions:
                Enabled: true
                KmsKeyId: 0c1ea9ad-321f-4cef-8b47-e9e58e51b928
            CognitoOptions: 
                Enabled: false
            DomainEndpointOptions: 
                EnforceHTTPS: true
                TLSSecurityPolicy: "Policy-Min-TLS-1-0-2019-07"
                CustomEndpointEnabled: false
            AdvancedSecurityOptions: 
                    Enabled: true
                    InternalUserDatabaseEnabled: true
                    MasterUserOptions: 
                        MasterUserName: !Ref 'MasterUser'
                        MasterUserPassword: !Ref 'MasterPW'
            Tags: 
                - Key: owner
                  Value: {OWNER}

    TheSnapshotRolePolicies:
        Type: "AWS::IAM::Policy"
        DependsOn:
            - OpenSearchDomain
        Properties:
            PolicyName: "es_snapshot_policy"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Action: 'es:*'
                      Resource: !GetAtt OpenSearchDomain.DomainArn
                    - Effect: Allow
                      Action: 'iam:PassRole'
                      Resource: !Ref SSMRoleARN
            Roles: 
                - !Ref SSMRole

    ESParamater:
        Type: AWS::SSM::Parameter
        Properties:
            Name: DomainEndpoint
            Type: String
            Value: !Join ['',['https://',!GetAtt [OpenSearchDomain, DomainEndpoint]]]
            Description: SSM Parameter of ES domain.

    ESDomainName:
        Type: AWS::SSM::Parameter
        Properties:
            Name: ESDomainName
            Type: String
            Value: !Ref 'OpenSearchDN'
            Description: SSM Parameter of ES domain name.

    ESMasterUser:
        Type: AWS::SSM::Parameter
        Properties:
            Name: ESMasterUser
            Type: String
            Value: !Ref 'MasterUser'
            Description: SSM Parameter of ES Master User.
    
    ESMasterPW:
        Type: AWS::SSM::Parameter
        Properties:
            Name: ESMasterPW
            Type: String
            Value: !Ref 'MasterPW'
            Description: SSM Parameter of ES Master PassWord.
    
                
Outputs: 
  DomainArn:
    Value:
      'Fn::GetAtt':
        - OpenSearchDomain
        - DomainArn
    Export:
        Name: !Sub "${AWS::StackName}-DomainArn"
  DomainEndpoint:
    Value:
      'Fn::GetAtt':
        - OpenSearchDomain
        - DomainEndpoint
    Export:
        Name: !Sub "${AWS::StackName}-DomainEndpoint"
  LambdaRole: 
    Value: !GetAtt lambdaSearchAppRole.Arn

