AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function that is going to receive the data form the API and 
             intertact with the ES cluster. Also this template will create the
             S3 Bucket that is going to host the static website.

Parameters:
  ESHost:
    Description: The ES hostname
    Type: String

  ESInstanceID:
    Description: The ID of the ES instance
    Type: String

  LambdaRole:
    Description: LambdaRole ARN
    Type: String


  AppBucket:
    Description: S2 Bucket Name
    Type: String


Resources:
  # S3 Bucket Name 저장소
  AppBucketSSMParamater:
      Type: AWS::SSM::Parameter
      Properties:
          Name: AppBucket
          Type: String
          Value: !Join ['',['s3://',!Ref AppBucket]]
          Description: SSM Parameter of S3 bucket.    

  # OpenSearch 조회용 Lambda
  # 생성 후 EC2에서 Update
  searchlambdacf:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: search-es-lambda
      Runtime: python3.8
      Role: !Ref LambdaRole
      Handler: search-es-lambda.lambda_handler
      Environment:
        Variables:
          HOST: !Ref ESHost
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            message = 'Hello Lambda World!'
            return message
      Description: Lambda function to interact with ES cluster
      TracingConfig:
        Mode: Active

  # Api Gateway Target으로 Lambda 설정
  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref searchlambdacf
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ['', [ 'arn:aws:execute-api:',  !Ref AWS::Region, ':',  !Ref AWS::AccountId, ':',  !Ref ApiGatewayRestApi, '/*/GET/' ]]  

  ApiGatewayRestApi:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
          Name: "search-es-api"
          Description: "Public API for searching an Amazon Elasticsearch Service domain"
          ApiKeySourceType: "HEADER"
          EndpointConfiguration: 
              Types: 
                - "REGIONAL"

  ApiGatewayMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !GetAtt
          - ApiGatewayRestApi
          - RootResourceId
          HttpMethod: "GET"
          AuthorizationType: "NONE"
          ApiKeyRequired: false
          RequestParameters: 
              "method.request.querystring.q": true
          MethodResponses: 
            - 
              ResponseModels: 
                  "application/json": "Empty"
              StatusCode: "200"
          Integration: 
              ContentHandling: "CONVERT_TO_TEXT"
              IntegrationHttpMethod: "POST"
              IntegrationResponses: 
                - 
                  ResponseTemplates: {}
                  StatusCode: "200"
              PassthroughBehavior: "WHEN_NO_MATCH"
              TimeoutInMillis: 29000
              Type: "AWS_PROXY"
              Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${searchlambdacf.Arn}/invocations"           

  ApiGatewayStage:
      Type: "AWS::ApiGateway::Stage"
      Properties:
          StageName: "search-es-api-test"
          DeploymentId: !Ref ApiGatewayDeployment
          RestApiId: !Ref ApiGatewayRestApi
          CacheClusterEnabled: false
          CacheClusterSize: "0.5"
          MethodSettings: 
            - ResourcePath: !Join ['',['/',!Ref ApiGatewayRestApi]]
              HttpMethod: GET
              MetricsEnabled: false
              ThrottlingBurstLimit: 500
              ThrottlingRateLimit: 1000
          TracingEnabled: false

  ApiGatewayDeployment:
      Type: "AWS::ApiGateway::Deployment"
      DependsOn: 
      - ApiGatewayMethod
      Properties:
          RestApiId: !Ref ApiGatewayRestApi

  # Api Gate URL 저장소
  APIParamater:
      Type: AWS::SSM::Parameter
      DependsOn: 
      - ApiGatewayDeployment
      Properties:
          Name: apiUrl
          Type: String
          Value: !Join ['',['https://',!Ref ApiGatewayRestApi, '.execute-api.',!Ref AWS::Region,'.amazonaws.com/',!Ref ApiGatewayStage]]
          Description: SSM Parameter of API URL.    

  # SSM Run Command 기능
  SpecificInstanceIdAssociation:
    Type: AWS::SSM::Association
    DependsOn: 
    - APIParamater
    Properties:     
      Name: AWS-RunShellScript
      Targets:
      - Key: InstanceIds
        Values:
        - !Ref ESInstanceID
      # Nginx 설치 및 Web Server 수정, 실행 Script
      Parameters:
        commands:
        - "set -x"
        - "sudo aws s3 cp {nginx.repo의 S3 URL} /etc/yum.repos.d/nginx.repo"
        - "sudo yum install nginx -y"
        - export var="{{ssm:apiUrl}}"
        - export a="var apigatewayendpoint = '"
        - export b="';"
        - sudo aws s3 sync {Web Server Script의 S3 URL} /usr/share/nginx/html/
        - echo -e "$a""$var""$b""$(</usr/share/nginx/html/search.js)" > /usr/share/nginx/html/search.js
        - "sudo systemctl start nginx"
        workingDirectory:
        - "/tmp"

  # SSM Run Command 기능
  SetLambdaCode:
    Type: AWS::SSM::Association
    DependsOn: 
    - searchlambdacf
    # - AppBucket
    Properties:     
      Name: AWS-RunShellScript
      Targets:
      - Key: InstanceIds
        Values:
        - !Ref ESInstanceID
      # Lambda Update Script
      Parameters:
        commands:
        - "set -x"
        - "cd /home/ec2-user"
        - "sudo aws s3 cp {search-es-lambda.py의 S3 URL} /home/ec2-user/search-es-lambda.py"
        - "pip3 install requests -t ."
        - "pip3 install requests_aws4auth -t ."
        - "zip -r lambda.zip *"
        - !Join ['',["aws lambda update-function-code --function-name search-es-lambda --zip-file fileb://lambda.zip  --region=", !Ref AWS::Region]]
        workingDirectory:
        - "/home/ec2-user"

Outputs: 
  searchlambdaName:
    Value: !Ref searchlambdacf
    Export:
        Name: !Sub "${AWS::StackName}-FunctionName"

  searchlambdaArn:
    Value: !GetAtt searchlambdacf.Arn   

  AppBucket:
    Value: !Ref AppBucket     

  ApiGatewayRestApi:
    Value: !Ref ApiGatewayRestApi
  ApiGatewayDeployment:
    Value: !Ref ApiGatewayDeployment
  ApiGatewayStage:
    Value: !Ref ApiGatewayStage
  ApiURL:
    Value: !Join ['',['https://',!Ref ApiGatewayRestApi, '.execute-api.',!Ref AWS::Region,'.amazonaws.com/',!Ref ApiGatewayStage]]
